
ias.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000001d6  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000052c  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000282  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040b  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000265  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001de  00000000  00000000  00001241  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000141f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	75 d0       	rcall	.+234    	; 0x1ae <main>
  c4:	86 c0       	rjmp	.+268    	; 0x1d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <transmit_data>:
#include "shift_reg.h"
#include "../ias_pinout.h"

void transmit_data(unsigned char data) {
	int i;
	for (i = 7; i >= 0; --i)
  c8:	27 e0       	ldi	r18, 0x07	; 7
  ca:	30 e0       	ldi	r19, 0x00	; 0
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		SHIFT_PORT = (SHIFT_PORT & 0xF0) | (1 << SRCLR_PIN);

		// set SER = next bit of data to be sent.
		SHIFT_PORT |= ((data >> i) & (1 << SER_PIN));
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
	int i;
	for (i = 7; i >= 0; --i)
	{
		// Sets SRCLR to 1 allowing data to be set
		// Also clears SRCLK in preparation of sending data
		SHIFT_PORT = (SHIFT_PORT & 0xF0) | (1 << SRCLR_PIN);
  d0:	95 b1       	in	r25, 0x05	; 5
  d2:	90 7f       	andi	r25, 0xF0	; 240
  d4:	98 60       	ori	r25, 0x08	; 8
  d6:	95 b9       	out	0x05, r25	; 5

		// set SER = next bit of data to be sent.
		SHIFT_PORT |= ((data >> i) & (1 << SER_PIN));
  d8:	45 b1       	in	r20, 0x05	; 5
  da:	bf 01       	movw	r22, r30
  dc:	02 2e       	mov	r0, r18
  de:	02 c0       	rjmp	.+4      	; 0xe4 <transmit_data+0x1c>
  e0:	75 95       	asr	r23
  e2:	67 95       	ror	r22
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <transmit_data+0x18>
  e8:	96 2f       	mov	r25, r22
  ea:	91 70       	andi	r25, 0x01	; 1
  ec:	94 2b       	or	r25, r20
  ee:	95 b9       	out	0x05, r25	; 5
		
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		SHIFT_PORT |= (1 << SRCLK_PIN);
  f0:	2a 9a       	sbi	0x05, 2	; 5
#include "shift_reg.h"
#include "../ias_pinout.h"

void transmit_data(unsigned char data) {
	int i;
	for (i = 7; i >= 0; --i)
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	31 09       	sbc	r19, r1
  f6:	60 f7       	brcc	.-40     	; 0xd0 <transmit_data+0x8>
		// set SRCLK = 1. Rising edge shifts next bit of data into the shift register
		SHIFT_PORT |= (1 << SRCLK_PIN);
	}
	
	// set RCLK = 1. Rising edge copies data from the “Shift” register to the “Storage” register
	SHIFT_PORT |= (1 << RCLK_PIN);
  f8:	29 9a       	sbi	0x05, 1	; 5
	
	// clears all lines in preparation of a new transmission
	SHIFT_PORT &= (0xF0);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	80 7f       	andi	r24, 0xF0	; 240
  fe:	85 b9       	out	0x05, r24	; 5
 100:	08 95       	ret

00000102 <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	_delay_ms(10);
}

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 102:	2c 98       	cbi	0x05, 4	; 5
	transmit_data( Command );//DATA_BUS = Command;
 104:	e1 df       	rcall	.-62     	; 0xc8 <transmit_data>
	SET_BIT(CONTROL_BUS,E);
 106:	2d 9a       	sbi	0x05, 5	; 5
	asm("nop");
 108:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 10a:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	8f e9       	ldi	r24, 0x9F	; 159
 10e:	9f e0       	ldi	r25, 0x0F	; 15
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <LCD_WriteCommand+0xe>
 114:	00 c0       	rjmp	.+0      	; 0x116 <LCD_WriteCommand+0x14>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <LCD_ClearScreen>:
#include "lumex_lcd.h"
#include "../ias_pinout.h"
#include "../com/shift_reg.h"

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	f2 cf       	rjmp	.-28     	; 0x102 <LCD_WriteCommand>
 11e:	08 95       	ret

00000120 <LCD_init>:
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	80 e7       	ldi	r24, 0x70	; 112
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <LCD_init+0x6>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_init+0x10>
 130:	00 00       	nop

void LCD_init(void) {

	//wait for 100 ms.
	_delay_ms(100);
	LCD_WriteCommand(0x38);
 132:	88 e3       	ldi	r24, 0x38	; 56
 134:	e6 df       	rcall	.-52     	; 0x102 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 136:	86 e0       	ldi	r24, 0x06	; 6
 138:	e4 df       	rcall	.-56     	; 0x102 <LCD_WriteCommand>
	LCD_WriteCommand(0x0e);
 13a:	8e e0       	ldi	r24, 0x0E	; 14
 13c:	e2 df       	rcall	.-60     	; 0x102 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	e0 df       	rcall	.-64     	; 0x102 <LCD_WriteCommand>
 142:	8f e1       	ldi	r24, 0x1F	; 31
 144:	9e e4       	ldi	r25, 0x4E	; 78
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_init+0x26>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_init+0x2c>
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <LCD_WriteData>:
	CLR_BIT(CONTROL_BUS,E);
	_delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
 150:	2c 9a       	sbi	0x05, 4	; 5
	transmit_data( Data );//DATA_BUS = Data;
 152:	ba df       	rcall	.-140    	; 0xc8 <transmit_data>
	SET_BIT(CONTROL_BUS,E);
 154:	2d 9a       	sbi	0x05, 5	; 5
	asm("nop");
 156:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 158:	2d 98       	cbi	0x05, 5	; 5
 15a:	8f ec       	ldi	r24, 0xCF	; 207
 15c:	97 e0       	ldi	r25, 0x07	; 7
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCD_WriteData+0xe>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCD_WriteData+0x14>
 164:	00 00       	nop
 166:	08 95       	ret

00000168 <LCD_Cursor>:
		LCD_WriteData(*string++);
	}
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x1 LCD: column < 9
 168:	81 31       	cpi	r24, 0x11	; 17
 16a:	18 f4       	brcc	.+6      	; 0x172 <LCD_Cursor+0xa>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
 16c:	81 58       	subi	r24, 0x81	; 129
 16e:	c9 cf       	rjmp	.-110    	; 0x102 <LCD_WriteCommand>
 170:	08 95       	ret
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 172:	81 55       	subi	r24, 0x51	; 81
 174:	c6 cf       	rjmp	.-116    	; 0x102 <LCD_WriteCommand>
 176:	08 95       	ret

00000178 <LCD_DisplayString>:
	asm("nop");
	CLR_BIT(CONTROL_BUS,E);
	_delay_ms(1);
}

void LCD_DisplayString( unsigned char column, const unsigned char* string, unsigned char clear) {
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	18 2f       	mov	r17, r24
 182:	eb 01       	movw	r28, r22
	if(clear == 1) 
 184:	41 30       	cpi	r20, 0x01	; 1
 186:	09 f4       	brne	.+2      	; 0x18a <LCD_DisplayString+0x12>
		LCD_ClearScreen();
 188:	c8 df       	rcall	.-112    	; 0x11a <LCD_ClearScreen>
	
	unsigned char c = column;
	while(*string) {
 18a:	88 81       	ld	r24, Y
 18c:	88 23       	and	r24, r24
 18e:	51 f0       	breq	.+20     	; 0x1a4 <LCD_DisplayString+0x2c>
		LCD_Cursor(c++);
 190:	01 e0       	ldi	r16, 0x01	; 1
 192:	01 0f       	add	r16, r17
 194:	81 2f       	mov	r24, r17
 196:	e8 df       	rcall	.-48     	; 0x168 <LCD_Cursor>
		LCD_WriteData(*string++);
 198:	89 91       	ld	r24, Y+
 19a:	da df       	rcall	.-76     	; 0x150 <LCD_WriteData>
	if(clear == 1) 
		LCD_ClearScreen();
	
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 19c:	10 2f       	mov	r17, r16
void LCD_DisplayString( unsigned char column, const unsigned char* string, unsigned char clear) {
	if(clear == 1) 
		LCD_ClearScreen();
	
	unsigned char c = column;
	while(*string) {
 19e:	88 81       	ld	r24, Y
 1a0:	81 11       	cpse	r24, r1
 1a2:	f6 cf       	rjmp	.-20     	; 0x190 <LCD_DisplayString+0x18>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	08 95       	ret

000001ae <main>:
#include "display/lumex_lcd.h"
#include "com/shift_reg.h"

int main(void) 
{
	DDRA = 0xFF; PORTA = 0x00; // Nokia LCD: 0-4. DHT22: 5. DS18B20: 6.
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	81 b9       	out	0x01, r24	; 1
 1b2:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF; PORTB = 0x00; // 16x2 LCD on Shift Registers
 1b4:	84 b9       	out	0x04, r24	; 4
 1b6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xF0; PORTC = 0x0F; // Keypad
 1b8:	90 ef       	ldi	r25, 0xF0	; 240
 1ba:	97 b9       	out	0x07, r25	; 7
 1bc:	9f e0       	ldi	r25, 0x0F	; 15
 1be:	98 b9       	out	0x08, r25	; 8
	DDRD = 0xFF; PORTD = 0x00; // USART interface
 1c0:	8a b9       	out	0x0a, r24	; 10
 1c2:	1b b8       	out	0x0b, r1	; 11
	
    LCD_init();
 1c4:	ad df       	rcall	.-166    	; 0x120 <LCD_init>

	for(;;)
	{
		LCD_DisplayString(3, (const unsigned char*) "Hello World!", 0);
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	71 e0       	ldi	r23, 0x01	; 1
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	d4 df       	rcall	.-88     	; 0x178 <LCD_DisplayString>
        
        //_delay_ms(1000);       // Delay logic for 100 ms
		
		//PORTD ^= 0xFF; // UI PORTD bits
			
	}
 1d0:	fa cf       	rjmp	.-12     	; 0x1c6 <main+0x18>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
